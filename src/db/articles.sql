create table if not exists public.Articles (
    id bigint generated by default as identity primary key,
    title text not null,
    slug text not null unique,
    content text not null,
    description text,
    category text not null,
    subcategory text,
    keywords text[],
    ImageUrl text,
    resources jsonb[],
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone,
    author_id uuid references auth.users(id),
    published boolean default false not null
);

-- Add RLS policies
alter table public.Articles enable row level security;

-- Allow anyone to read published articles
create policy "Anyone can read published articles"
    on public.Articles for select
    using (published = true);

-- Allow article authors to update their own articles
create policy "Users can update own articles"
    on public.Articles for update
    to authenticated
    using (auth.uid() = author_id)
    with check (auth.uid() = author_id);

-- Allow admins to manage all articles
create policy "Admins can manage all articles"
    on public.Articles for all
    to authenticated
    using (
        exists (
            select 1 from public.user_profile
            where id = auth.uid()
            and role = 'admin'
        )
    ); 